#summary What are we really trying to do with this project.
#labels Phase-Requirements

= Goals =

There are a large number of enhancements and changes that users of GME would like to see.  Some are obviously tied to the visual presentations and are clearly not applicable to the MGALib effort.  Others are tied to the operations of the MGA modeling engine itself.  These are the issues we wish to address.  Every GME users has their list of desired enhancements, some reasonable others not so much.  Captured below are the list of changes we are considering.  Once everything is on the table we can begin forming a scope and approach for getting some of them accomplished.

== List of Possible Changes (in no specific order) ==

|| ID || Title || Description || Status || Owner ||
|| 1 || *Unified UUID* || Move to using a single UUID (16 byte) representation for all object identification. A single UUID will be attached to every !CoreObject and all references to other objects will be done via a UUID.  This replaces at least 3 existing identification schemes currently in place in MGA: 1) MetaID,ObjID for !CoreObjects; 2) MetaRefID within a !MetaProject; 3) Something ID for use with Libraries. 4) The four attributes that correspond to a GUID in MGA. || Accepted.  Core and Meta are Done - Need to do MGA || GrahamH ||
|| 2 || *Remove Locks and Multi-user and Implement Optimistic VC* || Several previous attempts at implementing multi-user support are currently within the MGA codebase. || In discussion, but will likely be accepted.  Locks have all been removed from the code as has any support for the XML-based multi-user backend.  We need to spend some time figuring out how to capture MGA-level transactions and find a mapping of that data to !CoreObject and !CoreAttributes. || LarryH ||
|| 3 || *First-class Support for Inheritance* || Paradigm definition preserves relationship. || In discussion || PeterV ||
|| 4 || *First-class support for !RefPorts* || What about !RefAttributes?? || In discussion || GrahamH ||
|| 5 || *!HyperEdge Support* || Also called multi-endpoint Connection. || In discussion || PeterH ||
|| 6 || *Remove Libraries and Implement True External References* || A means to not pull an entire external file into the model.  Should not be limited to only MGA files too (this would require some type of per-file-type intermediary) || In discussion, but will likely be accepted.  All code supporting libraries is being removed but a great deal of thought needs to be put in place to figure out a generic approach for external references.  The use of Pointers vs. LongPointer should be the primary mechanism to enable this and that is already in place. || GrahamH ||
|| 7 || *Model Migration Scaffolding* || When a paradigm is modified it can break compatibility with existing models from that paradigm.  What tools would need to be put in place to allow a paradigm designer to also be able to specify how to migrate models from one version of the paradigm to another? || In discussion. || LarryH ||
|| 8 || *Remove Undo/Redo from Core and move to MGA* || Tightly coupled with optimistic version control (see #2). || In discussion. || LarryH ||
|| 9 || *Select Single Serialization Format* || No more .mga vs .xme.  One file format to rule them all. || In discussion. || GrahamH ||
|| 10 || *Provide Scripting Interface* || COM, Python currently seem to be the leading candidates.  Any others we should be considering? || In discussion. || KevinS ||
|| 11 || *Namespace Support* || What does this even mean in the context of a model? || In discussion. || GrahamH ||
|| 12 || *Robust API Design, Documentation, and Unit Testing* || Yes.  It is going to happen. || Accepted.  In progress.  Unit testing is included in the Testing subdirectory and utilizes the [http://code.google.com/p/googletest/ GoogleTest] framework which is JUint compatible.  Would be nice to get a link to another page that has the latest Hudson results. || GrahamH and KevinS ||
|| 13 || *Performance Testing and Tuning* || Create a suite of test cases that test the run-time performance of the MGA library and spend some about of time refactoring and tuning the library to improve performance results. || Accepted.  In progress. || KevinS ||
|| 14 || *Cross Platform Support in Standard C++* || At a minimum Win32, OSX, and Linux should be supported.  This could be done via a single CMake style build definition but will likely come from the development and maintenance of three separate project files (Visual Studio for Win32, XCode for OSX, and Makefile for Linux). || Accepted.  OSX by GrahamH, Win32 by KevinS, Linux by PeterV || GrahamH ||
|| 15 || *Super Search* || Provide support for searching !CoreObjects and !CoreAttributes via an API || In discussion. || LarryH ||
|| 16 || *Refactor Code Base* || The MGA code base is over 10 years old and not received much refactoring over time to refine or remove existing code.  One goal of the MGALib project should be to clean up the code as much as possible as we move through the library. || Accepted.  In progress. || GrahamH ||
|| 17 || *Reconsider Add-On interface* || For thoroughness and documentation. || In discussion. || LarryH ||
|| 18 || *Merging Atoms/Models/Sets/References* || At the metamodeling level (both MetaGME and Meta.dll) we might consider to get rid of the different FCO sub stereotypes. The difference in these are the potential relationships they can be part of. Constraining ourselves to future potential relationships in the metamodel is against metamodel refinement. The current stereotype information (not needed at all) could be inferred anyways from the relationships one defines in the metamodel. || In discussion. || PeterV ||
|| 19 || *Replace All String Types with Single Wide String* || GME currently uses a number of string representations, none of which are UTF-X compliant, I believe. We should move to a single wide string representation and use it consistently throughout the entire library. || In progress.  We put UTF-8 encoded strings into std::string and enforce proper encoding through use of [http://utfcpp.sourceforge.net/ utfcpp] (see Includes).   This happens at the !BinFile layer (see !BinAttributeString::Set), but earlier checking should be done at the !CoreAttribute level. || GrahamH ||
|| 20 || *Migrate from Windows Registry for Paradigm and Configuration Information* || Since cross-platformness is a goal (see #14), we need to move away from strictly using the Windows registry for paradigm and configuration information.  An XML file option would be great. || Accepted.  In progress.  We have defined a simple XML schema for capturing all of the information that is currently in the registry.  The [http://xerces.apache.org/xerces-c/ Xerces-C] framework is being used for all XML-DOM parsing and generating. || GrahamH ||
|| 21|| *Rationalize the Registry* || A tree-based registry is attached to many Mga objects to store Key-Value pairs that are not structured enough to use the normal !CoreObject-!CoreAttribute approach.  The current registry implementation finds a mapping of the tree to !CoreObjects but is really inefficient in both space and time.  Can we do better?  What about creating first-class support in Core for KV dictionaries? || In discussion, but will likely be accepted.  Looks like we mostly need to decide if the implementation will be that every !CoreObject has a dictionary or we add a new fundamental datatype for !CoreAttributes called Dictionary. || GrahamH ||