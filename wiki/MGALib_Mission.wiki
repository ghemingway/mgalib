#summary What are we really trying to do with this project.
#labels Phase-Requirements

= Goals =

There are a large number of enhancements and changes that users of GME would like to see.  Some are obviously tied to the visual presentations and are clearly not applicable to the MGALib effort.  Others are tied to the operations of the MGA modeling engine itself.  These are the issues we wish to address.  Every GME users has their list of desired enhancements, some reasonable others not so much.  Captured below are the list of changes we are considering.  Once everything is on the table we can begin forming a scope and approach for getting some of them accomplished.

== List of Possible Changes (in no specific order) ==


  * *Unified UUID* - Move to using a single UUID (16 byte) representation for all object identification. A single UUID will be attached to every !CoreObject and all references to other objects will be done via a UUID.  This replaces at least 3 existing identification schemes currently in place in MGA: 1) MetaID,ObjID for !CoreObjects; 2) MetaRefID within a !MetaProject; 3) Something ID for use with Libraries.

  * *Remove Locks and Multi-user and Implement Optimistic VC* - Several previous attempts at implementing multi-user support are currently within the MGA codebase.

  * *First-class Support for Inheritance* - paradigm definition preserves relationship

  * *First-class support for !RefPorts* - (!RefAttributes??)

  * *!HyperEdge Support* -  (multi-endpoint Connection)

  * *Remove Libraries and Implement True External References* - 

  * *Model Migration Scaffolding* - When a paradigm is modified it can break compatibility with existing models from that paradigm.  What tools would need to be put in place to allow a paradigm designer to also be able to specify how to migrate models from one version of the paradigm to another?

  * *Remove Undo/Redo from Core and move to MGA* - Tightly coupled with optimistic version control.

  * *Select Single Serialization Format* - No more *.mga vs *.xme

  * *Provide Scripting Interface* - COM, Python, etc.

  * *Namespace Support* -

  * *Robust API Design, Documentation, and Unit Testing* -

  * *Performance Testing and Tuning* - Create a suite of test cases that test the run-time performance of the MGA library and spend some about of time refactoring and tuning the library to improve performance results.

  * *Cross Platform Support in Standard C++* - At a minimum Win32, OSX, and Linux should be supported.  This could be done via a single CMake style build definition but will likely come from the development and maintenance of three separate project files (Visual Studio for Win32, XCode for OSX, and Makefile for Linux).

  * *Super Search* - Provide support for searching !CoreObjects and !CoreAttributes via an API

  * *Refactor Code Base* - The MGA code base is over 10 years old and not received much refactoring over time to refine or remove existing code.  One goal of the MGALib project should be to clean up the code as much as possible as we move through the library.

  * *Reconsider Add-On interface* - for thoroughness

  * *Replace All String Types with Single Wide String* - GME currently uses a number of string representations, none of which are UTF-16 I believe.  We should move to a single wide string representation and use it consistently throughout the entire library.